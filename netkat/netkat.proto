// Copyright 2024 The NetKAT authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// -----------------------------------------------------------------------------
// File: netkat.proto
// -----------------------------------------------------------------------------
//
// Proto representation of NetKAT programs (predicates and policies).
//
// This representation is NOT intended as a user-facing API. Instead, it serves
// as an intermdiate representation (IR) that is produced by user-facing
// NetKAT APIs (NetKAT frontend(s)) and consumed by NetKAT backends.
//
// This reprensentation is expected to lack the convenience and type safety of
// the user-facing API.
//
// Why have an IR?
// * Designing an ergonomic user-facing API is hard, and requires resolving many
//   design questions without an obvious "best" answer.
// * By having an IR, we can immediately work on the backend without waiting for
//   the user-facing API to be finalized. More generally, it decouples the
//   frontend design from the backend design.
// * Given that there is likely not a single best user-facing API, we may want
//   to explore multiple ones (but share the IR and backend).
// * It may make sense to have a specialized frontend API tailroed to Google's
//   internal needs, but it will likely not be open-sourceable.
//
// Why use protobufs for the IR?
// * It provides many useful features out of the box:
//   serialization/deserialization, pretty-printing, a text format, fuzzing
//   (e.g. using https://github.com/google/fuzztest), diffing.
// * It makes it easy to implement frontends and backends in different
//   programming languages.
// * It makes it easy to run backends as (gRPC) services.

syntax = "proto3";

package netkat;

// The intermediate representation of a NetKAT predicate.
// By convention, uninitialized predicates must be treated as `false`.
message PredicateProto {
  // A predicate is defined as some Boolean combination of matches and/or
  // constants.
  oneof predicate {
    Bool bool_constant = 1;
    Match match = 2;

    // Combinators.
    And and_op = 3;
    Or or_op = 4;
    Not not_op = 5;
    Xor xor_op = 6;
  }

  // A boolean constant, i.e. true or false. Equivalent to Accept/Deny.
  message Bool {
    bool value = 1;
  }

  // Checks if a field has a specific value.
  //
  // NOTE: This message is expected to change in the future! E.g., the type of
  // `value` will change to support things like 128-bit IPv6 addresses.
  message Match {
    string field = 1;
    int32 value = 2;
  }

  // Boolean conjunction of two predicates, i.e. a && b.
  message And {
    PredicateProto left = 1;
    PredicateProto right = 2;
  }

  // Boolean disjunction of two predicates, i.e. a || b.
  message Or {
    PredicateProto left = 1;
    PredicateProto right = 2;
  }

  // Boolean negation of a predicate, i.e. !a.
  message Not {
    PredicateProto negand = 1;
  }

  // Boolean exclusive Or of two predicates, i.e. a (+) b.
  message Xor {
    PredicateProto left = 1;
    PredicateProto right = 2;
  }
}

// The intermediate representation of a NetKAT policy.
// By convention, uninitialized policies must be treated as Deny (i.e. the
// false filter). We call the true filter Accept.
message PolicyProto {
  // A policy is defined as some combination of actions and predicates.
  oneof policy {
    PredicateProto filter = 1;
    Modification modification = 2;
    Record record = 3;

    // Combinators.
    Sequence sequence_op = 4;
    Union union_op = 5;
    Iterate iterate_op = 6;
    Push push_op = 7;
  }

  // Sets the field to the given value.
  //
  // NOTE: This message is expected to change in the future! E.g., the type of
  // `value` will change to support things like 128-bit IPv6 addresses.
  message Modification {
    string field = 1;
    int32 value = 2;
  }

  // Represents the sequential composition of a policy, i.e. a; b.
  //
  // Semantically, this behaves like a function composition in which we feed the
  // program inputs into a and forward each output of a into b.
  message Sequence {
    PolicyProto left = 1;
    PolicyProto right = 2;
  }

  // Represents the union of two policies, i.e. a + b.
  message Union {
    PolicyProto left = 1;
    PolicyProto right = 2;
  }

  // Represents iteration of a given policy, a.k.a the Kleene Star. E.g. p*.
  // I.e. Iterate(p) == Union(Accept, p, Sequence(p,p), Sequence(p,p,p), ...)
  message Iterate {
    PolicyProto iterable = 1;
  }

  // Represents computing the effect of a policy on a packet.
  // E.g. push(pred, policy).
  message Push {
    PredicateProto predicate = 1;
    PolicyProto policy = 2;
  }

  // Records the packet, at the given point, into the history. Referred to as
  // "dup" in the literature.
  message Record {}
}
